{
  "openapi": "3.0.2",
  "info": {
    "title": "Swagger Petstore - OpenAPI 3.0",
    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "API Team",
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.19"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://api.woox.io/"
    }
  ],
  "paths": {
    "/v3/public/systemInfo": {
      "get": {
        "description": "Get current system maintenance status. A status value of 0 means the system is functioning properly, a status value of 1 means the trading services are under maintenance and a status value of 2 means the system is under maintenance.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/instruments": {
      "get": {
        "description": "Retrieve a list of Spot and USDT perpetual instruments.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/token": {
      "get": {
        "description": "Get the available tokens that WOO X supports.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/tokenNetwork": {
      "get": {
        "description": "Get the available networks for each token as well as the deposit/withdrawal information.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenNetworkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/tokenInfo": {
      "get": {
        "description": "Retrieve spot token information.",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Token name in upper case",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/marketTrades": {
      "get": {
        "description": "Get the latest market trades. In the response, a source of 1 means these are internal trades on WOO X and a source of 0 means they are external trades from aggregated sources.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Numbers of trades you want to query. Maximum of 1000 trades allowed.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketTradesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/marketTradesHistory": {
      "get": {
        "description": "Get historical market trades data. In the response, a source of 1 means these are internal trades on WOO X and a source of 0 means they are external trades from aggregated sources.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "The id cursor for fetching the previous page of results, excluding the trade associated with the cursor itself.  Either before or after can be specified.  If both are provided, before takes precedence. If neither is passed, the results default to starting from the most recent trades.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The id cursor for fetching the next page of results, excluding the trade associated with the cursor itself.  Either before or after can be specified.  If both are provided, before takes precedence. If neither is passed, the results default to starting from the most recent trades.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Numbers of trades you want to query. Maximum of 1000 trades allowed.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketTradesHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/orderbook": {
      "get": {
        "description": "Get the snapshot of the symbol order book. Price of asks/bids are in descending order.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Maximum number of levels to show on both sides",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderbookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/kline": {
      "get": {
        "description": "Get the latest klines of the trading instrument.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "1m/3m/5m/15m/30m/1h/2h/4h/6h/12h/1d/1w/1mon/1y",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Numbers of klines. Maximum of 1000 klines allowed.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KlineResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/klineHistory": {
      "get": {
        "description": "Get the historical klines of the trading instrument.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "1m/3m/5m/15m/30m/1h/2h/4h/6h/12h/1d/1w/1mon/1y",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "The start timestamp cursor for fetching the previous page of results, excluding the kline associated with the cursor itself.  Either before or after can be specified.  If both are provided, before takes precedence. If neither is passed, the results default to starting from the most recent kline.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The start timestamp cursor for fetching the next page of results, excluding the kline associated with the cursor itself.  Either before or after can be specified.  If both are provided, before takes precedence. If neither is passed, the results default to starting from the most recent kline.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Numbers of klines you want to query. Maximum of 1000 klines allowed.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KlineHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/fundingRate": {
      "get": {
        "description": "Get predicted funding rate and the latest funding rate.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundingRateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/fundingRateHistory": {
      "get": {
        "description": "Get funding rate history for one market.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Start timestamp in Unix timestamp format in milliseconds",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "End timestamp in Unix timestamp format in milliseconds",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Data size per page",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundingRateHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/futures": {
      "get": {
        "description": "Get basic futures information for all the markets.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FuturesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/insuranceFund": {
      "get": {
        "description": "Get the insurance fund balance by perp contract.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsuranceFundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/trade/order": {
      "get": {
        "description": "get order",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "post": {
        "description": "post order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "put": {
        "description": "edit order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "delete": {
        "description": "cancel order",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CancelOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/trade/orders": {
      "get": {
        "description": "get orders",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetOrders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "delete": {
        "description": "Cancel multiple orders",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CancelOrders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/trade/algoOrder": {
      "get": {
        "description": "get order",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "post": {
        "description": "post algo order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/stop_order"
                  },
                  {
                    "$ref": "#/components/schemas/oco_order"
                  },
                  {
                    "$ref": "#/components/schemas/trailing_stop"
                  },
                  {
                    "$ref": "#/components/schemas/positional_tp_sl"
                  },
                  {
                    "$ref": "#/components/schemas/tp_sl"
                  },
                  {
                    "$ref": "#/components/schemas/bracket"
                  },
                  {
                    "$ref": "#/components/schemas/stop_bracket"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StopResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "put": {
        "description": "edit order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "delete": {
        "description": "cancel algo order",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CancelAlgoOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/trade/algoOrders": {
      "get": {
        "description": "get order",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "post": {
        "description": "post algo order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/stop_order"
                  },
                  {
                    "$ref": "#/components/schemas/oco_order"
                  },
                  {
                    "$ref": "#/components/schemas/trailing_stop"
                  },
                  {
                    "$ref": "#/components/schemas/positional_tp_sl"
                  },
                  {
                    "$ref": "#/components/schemas/tp_sl"
                  },
                  {
                    "$ref": "#/components/schemas/bracket"
                  },
                  {
                    "$ref": "#/components/schemas/stop_bracket"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StopResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "put": {
        "description": "edit order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "delete": {
        "description": "cancel multiple algo orders",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CancelAlgoOrders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/account/referral/summary": {
      "get": {
        "description": "Get referral information from each user you has referred.111",
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "description": "start time in unix timestamp",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "end time in unix timestamp",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the page you wish to query.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "the page size you wish to query, default = 25, 1000 at max.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/spotMargin/leverage": {
      "post": {
        "description": "set leverage",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLeverage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/asset/token/history": {
      "get": {
        "description": "get token history",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "WITHDRAW/DEPOSIT/FIAT_WITHDRAW/FIAT_DEPOSIT/EARN/VAULT_WITHDRAW/VAULT_DEPOSIT/YIELD_TO_BALANCE/CREDIT/DISTRIBUTION/REFERRAL/SUB_ACCOUNT_TRANSFER/REBATE/LIQUIDATION/SPECIAL/STAKING/UNSTAKING/UNSTAKING_FEE/INTEREST/CONVERT/FUNDING_FEE/SPOT_TRADING/TRADING_FEE/REALIZED_PNL/RFQ/ COPY_FEE / COPY_PROFIT_SHARED / FEE_REBATE",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/start_filter"
          },
          {
            "$ref": "#/components/parameters/end_filter"
          },
          {
            "$ref": "#/components/parameters/page_filter"
          },
          {
            "$ref": "#/components/parameters/size_filter"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/futures/defaultMarginMode": {
      "get": {
        "description": "get account level default margin mode",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultMarginModeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      },
      "ApiSignAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-signature"
      },
      "ApiTimestampAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-timestamp"
      }
    },
    "schemas": {
      "CommonResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "true"
          },
          "timestamp": {
            "type": "integer",
            "description": "timestamp"
          }
        }
      },
      "SystemInfoResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "description": ""
                  },
                  "msg": {
                    "type": "string",
                    "description": ""
                  },
                  "estimated_end_time": {
                    "type": "integer",
                    "description": ""
                  }
                }
              }
            }
          }
        ]
      },
      "InstrumentsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "status": {
                          "type": "string",
                          "description": "TRADING, SUSPENDED, TESTING"
                        },
                        "baseAsset": {
                          "type": "string",
                          "description": ""
                        },
                        "baseAssetMultiplier": {
                          "type": "number",
                          "description": ""
                        },
                        "quoteAsset": {
                          "type": "string",
                          "description": ""
                        },
                        "quoteMin": {
                          "type": "number",
                          "description": ""
                        },
                        "quoteMax": {
                          "type": "number",
                          "description": ""
                        },
                        "quoteTick": {
                          "type": "number",
                          "description": ""
                        },
                        "baseMin": {
                          "type": "number",
                          "description": ""
                        },
                        "baseMax": {
                          "type": "number",
                          "description": ""
                        },
                        "baseTick": {
                          "type": "number",
                          "description": ""
                        },
                        "minNotional": {
                          "type": "number",
                          "description": ""
                        },
                        "bidCapRatio": {
                          "type": "number",
                          "description": ""
                        },
                        "bidFloorRatio": {
                          "type": "number",
                          "description": ""
                        },
                        "askCapRatio": {
                          "type": "number",
                          "description": ""
                        },
                        "askFloorRatio": {
                          "type": "number",
                          "description": ""
                        },
                        "fundingIntervalHours": {
                          "type": "number",
                          "description": ""
                        },
                        "fundingCap": {
                          "type": "number",
                          "description": ""
                        },
                        "fundingFloor": {
                          "type": "number",
                          "description": ""
                        },
                        "orderMode": {
                          "type": "string",
                          "description": "NORMAL, POST_ONLY, REDUCE_ONLY, CANCEL_ONLY"
                        },
                        "baseIMR": {
                          "type": "number",
                          "description": ""
                        },
                        "baseMMR": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "TokenResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": ""
                        },
                        "fullname": {
                          "type": "string",
                          "description": ""
                        },
                        "decimals": {
                          "type": "number",
                          "description": ""
                        },
                        "network": {
                          "type": "string",
                          "description": ""
                        },
                        "balanceToken": {
                          "type": "string",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "TokenNetworkResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": ""
                        },
                        "network": {
                          "type": "string",
                          "description": ""
                        },
                        "token": {
                          "type": "string",
                          "description": ""
                        },
                        "name": {
                          "type": "string",
                          "description": ""
                        },
                        "minimumWithdrawal": {
                          "type": "number",
                          "description": ""
                        },
                        "withdrawalFee": {
                          "type": "number",
                          "description": ""
                        },
                        "allowDeposit": {
                          "type": "number",
                          "description": ""
                        },
                        "allowWithdraw": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "TokenInfoResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": ""
                        },
                        "delisted": {
                          "type": "number",
                          "description": ""
                        },
                        "canCollateral": {
                          "type": "boolean",
                          "description": ""
                        },
                        "canShort": {
                          "type": "boolean",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "MarketTradesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "side": {
                          "type": "string",
                          "description": ""
                        },
                        "source": {
                          "type": "number",
                          "description": ""
                        },
                        "executedPrice": {
                          "type": "string",
                          "description": ""
                        },
                        "executedQuantity": {
                          "type": "string",
                          "description": ""
                        },
                        "executedTimestamp": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "MarketTradesHistoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "description": ""
                        },
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "side": {
                          "type": "string",
                          "description": ""
                        },
                        "executedPrice": {
                          "type": "string",
                          "description": ""
                        },
                        "executedQuantity": {
                          "type": "string",
                          "description": ""
                        },
                        "executedTimestamp": {
                          "type": "number",
                          "description": ""
                        },
                        "source": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "OrderbookResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "asks": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "price": {
                          "type": "string",
                          "description": ""
                        },
                        "quantity": {
                          "type": "string",
                          "description": ""
                        }
                      }
                    }
                  },
                  "bids": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "price": {
                          "type": "string",
                          "description": ""
                        },
                        "quantity": {
                          "type": "string",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "KlineResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "open": {
                          "type": "string",
                          "description": ""
                        },
                        "close": {
                          "type": "string",
                          "description": ""
                        },
                        "low": {
                          "type": "string",
                          "description": ""
                        },
                        "high": {
                          "type": "string",
                          "description": ""
                        },
                        "volume": {
                          "type": "string",
                          "description": ""
                        },
                        "amount": {
                          "type": "string",
                          "description": ""
                        },
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "type": {
                          "type": "string",
                          "description": ""
                        },
                        "startTimestamp": {
                          "type": "number",
                          "description": ""
                        },
                        "endTimestamp": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "KlineHistoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "open": {
                          "type": "string",
                          "description": ""
                        },
                        "close": {
                          "type": "string",
                          "description": ""
                        },
                        "high": {
                          "type": "string",
                          "description": ""
                        },
                        "low": {
                          "type": "string",
                          "description": ""
                        },
                        "volume": {
                          "type": "string",
                          "description": ""
                        },
                        "amount": {
                          "type": "string",
                          "description": ""
                        },
                        "type": {
                          "type": "string",
                          "description": ""
                        },
                        "startTimestamp": {
                          "type": "number",
                          "description": ""
                        },
                        "endTimestamp": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "FundingRateResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "estFundingRate": {
                          "type": "string",
                          "description": ""
                        },
                        "estFundingRateTimestamp": {
                          "type": "number",
                          "description": ""
                        },
                        "lastFundingRate": {
                          "type": "string",
                          "description": ""
                        },
                        "lastFundingRateTimestamp": {
                          "type": "number",
                          "description": ""
                        },
                        "nextFundingTime": {
                          "type": "number",
                          "description": ""
                        },
                        "lastFundingIntervalHours": {
                          "type": "number",
                          "description": ""
                        },
                        "estFundingIntervalHours": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "FundingRateHistoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "fundingRate": {
                          "type": "string",
                          "description": ""
                        },
                        "fundingRateTimestamp": {
                          "type": "number",
                          "description": ""
                        },
                        "nextFundingTime": {
                          "type": "number",
                          "description": ""
                        },
                        "markPrice": {
                          "type": "string",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "FuturesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "indexPrice": {
                          "type": "string",
                          "description": ""
                        },
                        "markPrice": {
                          "type": "string",
                          "description": ""
                        },
                        "estFundingRate": {
                          "type": "string",
                          "description": ""
                        },
                        "lastFundingRate": {
                          "type": "string",
                          "description": ""
                        },
                        "openInterest": {
                          "type": "string",
                          "description": ""
                        },
                        "24hOpen": {
                          "type": "string",
                          "description": ""
                        },
                        "24hClose": {
                          "type": "string",
                          "description": ""
                        },
                        "24hHigh": {
                          "type": "string",
                          "description": ""
                        },
                        "24hLow": {
                          "type": "string",
                          "description": ""
                        },
                        "24hVolume": {
                          "type": "string",
                          "description": ""
                        },
                        "24hAmount": {
                          "type": "string",
                          "description": ""
                        },
                        "nextFundingTime": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "InsuranceFundResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": ""
                        },
                        "balance": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "GetOrder": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "description": "Id of the order; Either orderId or clientOrderId is required. If both are passed, orderId will be used.",
            "example": "1954766344355779056"
          },
          "clientOrderId": {
            "type": "integer",
            "description": "Client order Id as assigned by the user; Either orderId or clientOrderId is required. If both are passed, orderId will be used.",
            "example": "1954766344355779056"
          },
          "withRealizedPnl": {
            "type": "boolean",
            "description": "Whether to return order’s realized pnl; Note that realized PnL is only calculated for Perpetual close orders.",
            "example": "false"
          }
        }
      },
      "GetOrderResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "symbol": {
                    "type": "string",
                    "example": "PERP_BTC_USDT",
                    "description": "交易对，例如 BTC/USDT 永续合约"
                  },
                  "status": {
                    "type": "string",
                    "example": "FILLED",
                    "description": "订单状态，例如 FILLED 表示订单已完全成交"
                  },
                  "side": {
                    "type": "string",
                    "example": "SELL",
                    "description": "交易方向，SELL 表示卖出，BUY 表示买入"
                  },
                  "positionSide": {
                    "type": "string",
                    "example": "BOTH",
                    "description": "持仓方向，例如 BOTH 表示双向持仓模式"
                  },
                  "createdTime": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1578565539808,
                    "description": "订单创建时间，Unix 时间戳（毫秒）"
                  },
                  "orderId": {
                    "type": "integer",
                    "example": 13,
                    "description": "订单编号，唯一标识订单"
                  },
                  "orderTag": {
                    "type": "string",
                    "example": "default",
                    "description": "订单标签，例如 default"
                  },
                  "price": {
                    "type": "string",
                    "example": "123",
                    "description": "限价订单的价格（每单位资产的价格）"
                  },
                  "type": {
                    "type": "string",
                    "example": "LIMIT",
                    "description": "订单类型，例如 LIMIT 表示限价订单"
                  },
                  "quantity": {
                    "type": "string",
                    "example": "0.1",
                    "description": "订单总量，表示订单的资产数量"
                  },
                  "amount": {
                    "type": "string",
                    "nullable": true,
                    "example": "null",
                    "description": "订单总金额，可能为 null"
                  },
                  "visible": {
                    "type": "string",
                    "example": "0.1",
                    "description": "可见数量，表示订单中展示给市场的部分"
                  },
                  "executed": {
                    "type": "string",
                    "example": "0.1",
                    "description": "已成交数量"
                  },
                  "totalFee": {
                    "type": "string",
                    "example": "0.00123",
                    "description": "总手续费，单位为手续费资产类型"
                  },
                  "feeAsset": {
                    "type": "string",
                    "example": "USDT",
                    "description": "手续费支付的资产类型"
                  },
                  "totalRebate": {
                    "type": "number",
                    "example": 0,
                    "description": "总返佣金额"
                  },
                  "rebateCurrency": {
                    "type": "string",
                    "example": "USDT",
                    "description": "返佣的资产类型"
                  },
                  "clientOrderId": {
                    "type": "integer",
                    "example": 0,
                    "description": "客户自定义订单 ID"
                  },
                  "reduceOnly": {
                    "type": "boolean",
                    "example": false,
                    "description": "是否为减仓订单"
                  },
                  "realizedPnl": {
                    "type": "string",
                    "example": "100",
                    "description": "实现盈亏，例如 100 表示盈利 100 USDT"
                  },
                  "averageExecutedPrice": {
                    "type": "string",
                    "example": "123",
                    "description": "平均成交价格"
                  }
                }
              }
            }
          }
        ]
      },
      "EditOrder": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "description": "Id of the order; Either orderId or clientOrderId is required. If both are passed, orderId will be used."
          },
          "clientOrderId": {
            "type": "integer",
            "description": "Client order Id as assigned by the user; Either orderId or clientOrderId is required. If both are passed, orderId will be used."
          },
          "price": {
            "type": "string",
            "description": "Only applicable to LIMIT/IOC/FOK/POST_ONLY orders;  MARKET/ASK/BID orders will ignore this field",
            "example": ""
          },
          "quantity": {
            "type": "string",
            "description": "Either quantity or amount is required;  If both are passed, the request will be rejected",
            "example": ""
          }
        }
      },
      "EditOrderResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": ""
                  }
                }
              }
            }
          }
        ]
      },
      "CreateOrder": {
        "required": [
          "symbol",
          "side",
          "type"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name",
            "example": "SPOT_BTC_USDT"
          },
          "clientOrderId": {
            "type": "integer",
            "description": "Valid input ranges from 0 to 9223372036854775807",
            "example": "1954766344355779056"
          },
          "orderTag": {
            "type": "string",
            "description": "Optional tag for this order, max string length: 64",
            "example": ""
          },
          "side": {
            "type": "string",
            "description": "BUY/SELL",
            "example": ""
          },
          "positionSide": {
            "type": "string",
            "description": "Position side; The default is BOTH in the one way mode;  Can only be LONG or SHORT in the hedge mode.  Only applicable to perpetual instruments.",
            "example": ""
          },
          "type": {
            "type": "string",
            "description": "LIMIT/MARKET/IOC/FOK/POST_ONLY/ASK/BID",
            "example": ""
          },
          "price": {
            "type": "string",
            "description": "Only applicable to LIMIT/IOC/FOK/POST_ONLY orders;  MARKET/ASK/BID orders will ignore this field",
            "example": ""
          },
          "quantity": {
            "type": "string",
            "description": "Either quantity or amount is required;  If both are passed, the request will be rejected",
            "example": ""
          },
          "amount": {
            "type": "string",
            "description": "Only applicable to MARKET/ASK/BID orders on spot instruments;  Either quantity or amount is required;  If both are passed, the request will be rejected",
            "example": ""
          },
          "reduceOnly": {
            "type": "boolean",
            "description": "Only applicable to perpetual instruments; Whether the order can only reduce in position size; valid options are true/false",
            "example": ""
          },
          "visibleQuantity": {
            "type": "string",
            "description": "The order quantity visible on orderbook",
            "example": ""
          }
        }
      },
      "CreateOrderResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "orderId": {
                    "type": "integer",
                    "description": ""
                  },
                  "type": {
                    "type": "string",
                    "description": ""
                  },
                  "price": {
                    "type": "string",
                    "description": ""
                  },
                  "quantity": {
                    "type": "string",
                    "description": ""
                  },
                  "amount": {
                    "type": "string",
                    "description": ""
                  },
                  "clientOrderId": {
                    "type": "integer",
                    "description": ""
                  }
                }
              }
            }
          }
        ]
      },
      "CancelOrder": {
        "required": [
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name1qq",
            "example": "SPOT_BTC_USDT"
          },
          "orderId": {
            "type": "integer",
            "description": "Id of the order; Either orderId or clientOrderId is required. If both are passed, orderId will be used.",
            "example": "1954766344355779056"
          },
          "clientOrderId": {
            "type": "integer",
            "description": "Client order Id as assigned by the user; Either orderId or clientOrderId is required. If both are passed, orderId will be used.",
            "example": "1954766344355779056"
          }
        }
      },
      "CancelOrderResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": ""
                  }
                }
              }
            }
          }
        ]
      },
      "GetOrders": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name"
          },
          "side": {
            "type": "string",
            "description": "BUY/SELL"
          },
          "positionSide": {
            "type": "string",
            "description": "BOTH for one way mode; LONG or SHORT for hedge mode;  Only applicable to perpetual instruments"
          },
          "type": {
            "type": "string",
            "description": "LIMIT/MARKET/IOC/FOK/POST_ONLY/LIQUIDATE"
          },
          "orderTag": {
            "type": "string",
            "description": "Order tag"
          },
          "withRealizedPnl": {
            "type": "boolean",
            "description": "Whether to return order’s realized pnl; Note that realized PnL is only calculated for Perpetual close orders."
          },
          "status": {
            "type": "string",
            "description": "NEW/CANCELLED/PARTIAL_FILLED/FILLED/REJECTED/INCOMPLETE/COMPLETED"
          },
          "startTime": {
            "type": "integer",
            "description": "Start timestamp in Unix timestamp format in milliseconds"
          },
          "endTime": {
            "type": "integer",
            "description": "End timestamp in Unix timestamp format in milliseconds"
          },
          "page": {
            "type": "integer",
            "description": "Page number"
          },
          "size": {
            "type": "integer",
            "description": "Data size per page, max 500"
          }
        }
      },
      "CancelOrders": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name",
            "example": "SPOT_BTC_USDT"
          }
        }
      },
      "common_algo": {
        "type": "object",
        "required": [
          "symbol",
          "algoType"
        ],
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name"
          },
          "algoType": {
            "type": "string",
            "description": "STOP: stop market / stop limit order\nOCO: one-cancels-the-other order\nTRAILING_STOP: trailing stop order \nPOSITIONAL_TP_SL: TP/SL that closes the full position\nTP_SL: TP/SL that closes a specified quantity\nBRACKET: bracket order with limit or market order as the initial order and an attached POSITIONAL_TP_SL or TP_SL order\nSTOP_BRACKET: bracket order with stop market or stop limit order as the initial order and an attached POSITIONAL_TP_SL or TP_SL order"
          },
          "clientAlgoOrderId": {
            "type": "integer",
            "description": "Client algo order Id as assigned by the user"
          },
          "algoOrderTag": {
            "type": "string",
            "description": "An optional tag for this order, max string length: 64"
          },
          "side": {
            "type": "string",
            "description": "BUY/SELL, not required for POSITIONAL_TP_SL or TP_SL order"
          },
          "positionSide": {
            "type": "string",
            "description": "BOTH for one way mode; LONG or SHORT for hedge mode;  Only applicable to perpetual instruments"
          },
          "quantity": {
            "type": "string",
            "description": "Order quantity, not required for POSITIONAL_TP_SL order"
          },
          "visibleQuantity": {
            "type": "string",
            "description": "The order quantity shown on orderbook;  for POSITIONAL_TP_SL order, visibleQuantity applies directly to the child orders"
          }
        }
      },
      "stop_order": {
        "description": "Stop order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "properties": {
              "triggerPrice": {
                "type": "string",
                "description": "Only support LIMIT"
              },
              "triggerPriceType": {
                "type": "string",
                "description": "Trigger price type, currently only support MARKET_PRICE (i.e. last price)"
              },
              "type": {
                "type": "string",
                "description": "Trigger price, only support LIMIT"
              },
              "price": {
                "type": "string",
                "description": "Order price, only applicable to LIMIT type"
              },
              "reduceOnly": {
                "type": "boolean",
                "description": "Only applicable to perpetual instruments; whether the order can only reduce in position size; valid options are true/false"
              }
            }
          }
        ]
      },
      "oco_order": {
        "description": "OCO order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "required": [
              "type",
              "price",
              "childOrders"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "Trigger price, only support LIMIT"
              },
              "price": {
                "type": "string",
                "description": "Order price, only applicable to LIMIT type"
              },
              "reduceOnly": {
                "type": "boolean",
                "description": "Only applicable to perpetual instruments; whether the order can only reduce in position size; valid options are true/false"
              },
              "childOrders": {
                "type": "array",
                "description": "Details of the other order (i.e. the trigger order)",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoType": {
                      "type": "string",
                      "description": "Only support STOP"
                    },
                    "side": {
                      "type": "string",
                      "description": "BUY/SELL; required to be the same as the side of the LIMIT order"
                    },
                    "triggerPrice": {
                      "type": "string",
                      "description": "Trigger price"
                    },
                    "triggerPriceType": {
                      "type": "string",
                      "description": "Trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                    },
                    "type": {
                      "type": "string",
                      "description": "Order type of the trigger order, LIMIT/MARKET"
                    },
                    "price": {
                      "type": "string",
                      "description": "Order price of the trigger order, only applicable if it's a LIMIT order"
                    }
                  },
                  "required": [
                    "algoType",
                    "side",
                    "triggerPrice",
                    "type"
                  ]
                }
              }
            }
          }
        ]
      },
      "trailing_stop": {
        "description": "TRAILING STOP order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Trigger price, only support LIMIT"
              },
              "activatedPrice": {
                "type": "string",
                "description": "Activated price"
              },
              "callbackRate": {
                "type": "string",
                "description": "Either callbackValue or callbackRate is required;  If both are passed, the request will be rejected"
              },
              "callbackValue": {
                "type": "string",
                "description": "Either callbackValue or callbackRate is required;  If both are passed, the request will be rejected"
              },
              "reduceOnly": {
                "type": "boolean",
                "description": "Only applicable to perpetual instruments; whether the order can only reduce in position size; valid options are true/false"
              }
            }
          }
        ]
      },
      "positional_tp_sl": {
        "description": "POSITIONAL TP/SL order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "required": [
              "childOrders"
            ],
            "properties": {
              "childOrders": {
                "type": "array",
                "description": "Details of the positional TP/SL information, can contain at most 1 TAKE_PROFIT and 1 STOP_LOSS",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoType": {
                      "type": "string",
                      "description": "TAKE_PROFIT/STOP_LOSS"
                    },
                    "side": {
                      "type": "string",
                      "description": "BUY/SELL"
                    },
                    "triggerPrice": {
                      "type": "string",
                      "description": "Trigger price"
                    },
                    "triggerPriceType": {
                      "type": "string",
                      "description": "Trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                    },
                    "type": {
                      "type": "string",
                      "description": "Only support CLOSE_POSITION"
                    }
                  },
                  "required": [
                    "algoType",
                    "side",
                    "triggerPrice",
                    "type"
                  ]
                }
              }
            }
          }
        ]
      },
      "tp_sl": {
        "description": "TP/SL order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "required": [
              "childOrders"
            ],
            "properties": {
              "childOrders": {
                "type": "array",
                "description": "Details of the TP/SL information, can contain at most 1 TAKE_PROFIT and 1 STOP_LOSS",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoType": {
                      "type": "string",
                      "description": "TAKE_PROFIT/STOP_LOSS"
                    },
                    "side": {
                      "type": "string",
                      "description": "BUY/SELL"
                    },
                    "triggerPrice": {
                      "type": "string",
                      "description": "Trigger price"
                    },
                    "triggerPriceType": {
                      "type": "string",
                      "description": "Trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                    },
                    "type": {
                      "type": "string",
                      "description": "Only support MARKET"
                    }
                  },
                  "required": [
                    "algoType",
                    "side",
                    "triggerPrice",
                    "type"
                  ]
                }
              }
            }
          }
        ]
      },
      "bracket": {
        "description": "Bracket order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "required": [
              "type",
              "price",
              "childOrders"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "LIMIT/MARKET"
              },
              "price": {
                "type": "string",
                "description": "Order price, only applicable if LIMIT order"
              },
              "reduceOnly": {
                "type": "boolean",
                "description": "Only applicable to perpetual instruments; whether the LIMIT/MARKET order can only reduce in position size; only support false for BRACKET orders"
              },
              "childOrders": {
                "type": "array",
                "description": "Attached TP/SL orders, only support 1 set of POSITIONAL_TP_SL or TP_SL",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoType": {
                      "type": "string",
                      "description": "TAKE_PROFIT/STOP_LOSS"
                    },
                    "side": {
                      "type": "string",
                      "description": "Required to be SELL if side of the initial order is BUY;  Required to be BUY if side of the initial order is SELL"
                    },
                    "triggerPrice": {
                      "type": "string",
                      "description": "Trigger price of the TP/SL"
                    },
                    "triggerPriceType": {
                      "type": "string",
                      "description": "Trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                    },
                    "type": {
                      "type": "string",
                      "description": "CLOSE_POSITION for POSITIONAL_TP_SL; MARKET for TP_SL"
                    }
                  },
                  "required": [
                    "algoType",
                    "side",
                    "triggerPrice",
                    "type"
                  ]
                }
              }
            }
          }
        ]
      },
      "stop_bracket": {
        "description": "Stop bracket order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "required": [
              "type",
              "price",
              "childOrders"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "LIMIT/MARKET"
              },
              "price": {
                "type": "string",
                "description": "Order price, only applicable if LIMIT order"
              },
              "reduceOnly": {
                "type": "boolean",
                "description": "Only applicable to perpetual instruments; whether the LIMIT/MARKET order can only reduce in position size; only support false for STOP_BRACKET orders"
              },
              "triggerPrice": {
                "type": "string",
                "description": "Trigger price of the initial stop order"
              },
              "triggerPriceType": {
                "type": "string",
                "description": "Trigger price type of the initial stop order, currently only support MARKET_PRICE (i.e. last price)"
              },
              "childOrders": {
                "type": "array",
                "description": "Attached TP/SL orders, only support 1 set of POSITIONAL_TP_SL or TP_SL",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoType": {
                      "type": "string",
                      "description": "POSITIONAL_TP_SL/TP_SL"
                    },
                    "childOrders": {
                      "type": "array",
                      "description": "Details of the TP/SL information, can contain at most 1 TAKE_PROFIT and 1 STOP_LOSS",
                      "items": {
                        "type": "object",
                        "properties": {
                          "algoType": {
                            "type": "string",
                            "description": "TAKE_PROFIT/STOP_LOSS"
                          },
                          "side": {
                            "type": "string",
                            "description": "Required to be SELL if side of the initial order is BUY;  Required to be BUY if side of the initial order is SELL"
                          },
                          "triggerPrice": {
                            "type": "string",
                            "description": "Trigger price of the TP/SL"
                          },
                          "triggerPriceType": {
                            "type": "string",
                            "description": "Trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                          },
                          "type": {
                            "type": "string",
                            "description": "CLOSE_POSITION for POSITIONAL_TP_SL; MARKET for TP_SL"
                          }
                        },
                        "required": [
                          "algoType",
                          "side",
                          "triggerPrice",
                          "type"
                        ]
                      }
                    }
                  },
                  "required": [
                    "algoType",
                    "childOrders"
                  ]
                }
              }
            }
          }
        ]
      },
      "AlgoBaseResponse": {
        "type": "object",
        "properties": {
          "algoOrderId": {
            "type": "integer",
            "description": "algoOrderId"
          },
          "clientAlgoOrderId": {
            "type": "integer",
            "description": "clientAlgoOrderId"
          },
          "algoType": {
            "type": "string",
            "description": "ALGO_TYPE"
          },
          "quantity": {
            "type": "string",
            "description": "quantity"
          }
        }
      },
      "StopResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AlgoBaseResponse"
                    },
                    "description": ""
                  }
                }
              }
            }
          }
        ]
      },
      "CancelAlgoOrder": {
        "type": "object",
        "properties": {
          "algoOrderId": {
            "type": "integer",
            "description": "Id of the algoorder; Either algoOrderId or clientAlgoOrderId is required. If both are passed, algoOrderId will be used.",
            "example": "1954766344355779056"
          },
          "clientAlgoOrderId": {
            "type": "integer",
            "description": "Client order Id as assigned by the user; Either algoOrderId or clientAlgoOrderId is required. If both are passed, algoOrderId will be used.",
            "example": "1954766344355779056"
          }
        }
      },
      "CancelAlgoOrders": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name"
          }
        }
      },
      "Meta": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of record"
          },
          "recordsPerPage": {
            "type": "integer",
            "description": "Number of records per page"
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number"
          }
        }
      },
      "ReferralResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "referralId": {
                          "type": "integer",
                          "description": "Referral ID"
                        },
                        "registerTime": {
                          "type": "string",
                          "description": "Time the referral was registered"
                        },
                        "referralCode": {
                          "type": "string",
                          "description": "Referral code"
                        },
                        "tradeStatus": {
                          "type": "string",
                          "description": "Status of the trade"
                        },
                        "earned": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "token": {
                                "type": "string",
                                "description": "Token type"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Amount earned"
                              }
                            }
                          }
                        },
                        "email": {
                          "type": "string",
                          "description": "Email address"
                        }
                      }
                    }
                  },
                  "meta": {
                    "$ref": "#/components/schemas/Meta"
                  }
                }
              }
            }
          }
        ]
      },
      "SetLeverage": {
        "required": [
          "leverage"
        ],
        "type": "object",
        "properties": {
          "leverage": {
            "type": "integer",
            "description": "For margin mode: 3, 4, 5, 10; for futures mode: 1, 2, 3, 4, 5, 10, 15, 20, 30, 40, 50",
            "example": "5"
          }
        }
      },
      "TokenHistoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": ""
                        },
                        "type": {
                          "type": "string",
                          "description": "type"
                        },
                        "token": {
                          "type": "string",
                          "description": "token"
                        },
                        "amount": {
                          "type": "string",
                          "description": "amount"
                        },
                        "timestamp": {
                          "type": "integer",
                          "description": "timestamp"
                        }
                      }
                    }
                  },
                  "meta": {
                    "$ref": "#/components/schemas/Meta"
                  }
                }
              }
            }
          }
        ]
      },
      "DefaultMarginModeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "integer",
                          "description": ""
                        },
                        "defaultMarginMode": {
                          "type": "string",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "parameters": {
      "start_filter": {
        "name": "startTime",
        "in": "query",
        "description": "start www time in unix timestamp",
        "required": false,
        "explode": true,
        "schema": {
          "type": "integer"
        }
      },
      "end_filter": {
        "name": "endTime",
        "in": "query",
        "description": "end time in unix timestamp",
        "required": false,
        "explode": true,
        "schema": {
          "type": "integer"
        }
      },
      "page_filter": {
        "name": "page",
        "in": "query",
        "description": "the page you wish to query.",
        "required": false,
        "explode": true,
        "schema": {
          "type": "integer",
          "default": 1
        }
      },
      "size_filter": {
        "name": "size",
        "in": "query",
        "description": "the page size you wish to query, default = 25, 1000 at max.",
        "required": false,
        "explode": true,
        "schema": {
          "type": "integer",
          "default": 25
        }
      }
    }
  }
}