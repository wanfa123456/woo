{
  "openapi": "3.0.2",
  "info": {
    "title": "Swagger Petstore - OpenAPI 3.0",
    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "API Team",
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.19"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://api.woox.io/"
    }
  ],
  "paths": {
    "/v3/public/systemInfo": {
      "get": {
        "description": "Get current system maintenance status. A status value of 0 means the system is functioning properly, a status value of 1 means the trading services are under maintenance and a status value of 2 means the system is under maintenance.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/instruments": {
      "get": {
        "description": "Retrieve a list of Spot and USDT perpetual instruments.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/token": {
      "get": {
        "description": "Get the available tokens that WOO X supports.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/tokenNetwork": {
      "get": {
        "description": "Get the available networks for each token as well as the deposit/withdrawal information.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenNetworkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/tokenInfo": {
      "get": {
        "description": "Retrieve spot token information.",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Token name in upper case",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/marketTrades": {
      "get": {
        "description": "Get the latest market trades. In the response, a source of 1 means these are internal trades on WOO X and a source of 0 means they are external trades from aggregated sources.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Numbers of trades you want to query. Maximum of 1000 trades allowed.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketTradesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/marketTradesHistory": {
      "get": {
        "description": "Get historical market trades data. In the response, a source of 1 means these are internal trades on WOO X and a source of 0 means they are external trades from aggregated sources.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "The id cursor for fetching the previous page of results, excluding the trade associated with the cursor itself.  Either before or after can be specified.  If both are provided, before takes precedence. If neither is passed, the results default to starting from the most recent trades.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The id cursor for fetching the next page of results, excluding the trade associated with the cursor itself.  Either before or after can be specified.  If both are provided, before takes precedence. If neither is passed, the results default to starting from the most recent trades.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Numbers of trades you want to query. Maximum of 1000 trades allowed.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketTradesHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/orderbook": {
      "get": {
        "description": "Get the snapshot of the symbol order book. Price of asks/bids are in descending order.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Maximum number of levels to show on both sides",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderbookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/kline": {
      "get": {
        "description": "Get the latest klines of the trading instrument.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "1m/3m/5m/15m/30m/1h/2h/4h/6h/12h/1d/1w/1mon/1y",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Numbers of klines. Maximum of 1000 klines allowed.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KlineResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/klineHistory": {
      "get": {
        "description": "Get the historical klines of the trading instrument.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "1m/3m/5m/15m/30m/1h/2h/4h/6h/12h/1d/1w/1mon/1y",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "The start timestamp cursor for fetching the previous page of results, excluding the kline associated with the cursor itself.  Either before or after can be specified.  If both are provided, before takes precedence. If neither is passed, the results default to starting from the most recent kline.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The start timestamp cursor for fetching the next page of results, excluding the kline associated with the cursor itself.  Either before or after can be specified.  If both are provided, before takes precedence. If neither is passed, the results default to starting from the most recent kline.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Numbers of klines you want to query. Maximum of 1000 klines allowed.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KlineHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/fundingRate": {
      "get": {
        "description": "Get predicted funding rate and the latest funding rate.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundingRateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/fundingRateHistory": {
      "get": {
        "description": "Get funding rate history for one market.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Start timestamp in Unix timestamp format in milliseconds",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "End timestamp in Unix timestamp format in milliseconds",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Data size per page",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundingRateHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/futures": {
      "get": {
        "description": "Get basic futures information for all the markets.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FuturesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/public/insuranceFund": {
      "get": {
        "description": "Get the insurance fund balance by perp contract.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "Symbol name",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsuranceFundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/v3/trade/order": {
      "get": {
        "description": "get order",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "post": {
        "description": "post order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "put": {
        "description": "edit order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "delete": {
        "description": "cancel order",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CancelOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/trade/orders": {
      "get": {
        "description": "get orders",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetOrders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrdersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "delete": {
        "description": "Cancel multiple orders",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CancelOrders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/trade/algoOrder": {
      "get": {
        "description": "get algo order",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetAlgoOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAlgoOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "post": {
        "description": "post algo order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/stop_order_stop_order"
                  },
                  {
                    "$ref": "#/components/schemas/oco_order_oco_order"
                  },
                  {
                    "$ref": "#/components/schemas/trailing_stop_trailing_stop"
                  },
                  {
                    "$ref": "#/components/schemas/positional_tp_sl_positional_tp_sl"
                  },
                  {
                    "$ref": "#/components/schemas/tp_sl_tp_sl"
                  },
                  {
                    "$ref": "#/components/schemas/bracket_bracket"
                  },
                  {
                    "$ref": "#/components/schemas/stop_bracket_stop_bracket"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StopResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "put": {
        "description": "edit algo order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/stop_order"
                  },
                  {
                    "$ref": "#/components/schemas/oco_order"
                  },
                  {
                    "$ref": "#/components/schemas/trailing_stop"
                  },
                  {
                    "$ref": "#/components/schemas/positional_tp_sl"
                  },
                  {
                    "$ref": "#/components/schemas/tp_sl"
                  },
                  {
                    "$ref": "#/components/schemas/bracket"
                  },
                  {
                    "$ref": "#/components/schemas/stop_bracket"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "delete": {
        "description": "cancel algo order",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CancelAlgoOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/trade/algoOrders": {
      "get": {
        "description": "get algo orders",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetAlgoOrders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAlgoOrdersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "post": {
        "description": "post algo order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/stop_order_stop_order"
                  },
                  {
                    "$ref": "#/components/schemas/oco_order_oco_order"
                  },
                  {
                    "$ref": "#/components/schemas/trailing_stop_trailing_stop"
                  },
                  {
                    "$ref": "#/components/schemas/positional_tp_sl_positional_tp_sl"
                  },
                  {
                    "$ref": "#/components/schemas/tp_sl_tp_sl"
                  },
                  {
                    "$ref": "#/components/schemas/bracket_bracket"
                  },
                  {
                    "$ref": "#/components/schemas/stop_bracket_stop_bracket"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StopResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "put": {
        "description": "edit order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "delete": {
        "description": "cancel multiple algo orders",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CancelAlgoOrders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/trade/allOrders": {
      "get": {
        "description": "get order",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "post": {
        "description": "post algo order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/stop_order_stop_order"
                  },
                  {
                    "$ref": "#/components/schemas/oco_order_oco_order"
                  },
                  {
                    "$ref": "#/components/schemas/trailing_stop_trailing_stop"
                  },
                  {
                    "$ref": "#/components/schemas/positional_tp_sl_positional_tp_sl"
                  },
                  {
                    "$ref": "#/components/schemas/tp_sl_tp_sl"
                  },
                  {
                    "$ref": "#/components/schemas/bracket_bracket"
                  },
                  {
                    "$ref": "#/components/schemas/stop_bracket_stop_bracket"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/StopResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "put": {
        "description": "edit order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      },
      "delete": {
        "description": "Cancel all orders by symbol",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CancelOrdersBySymbol"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/trade/transaction": {
      "get": {
        "description": "get transaction by trade id (last 3 months)",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetTransaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/trade/transactionHistory": {
      "get": {
        "description": "Get transaction history (in the past 2 years) ",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/trade/tradingFee": {
      "get": {
        "description": "Get Trading Fee",
        "requestBody": {
          "description": "",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GetTradingFee"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTradingFeeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/account/referral/summary": {
      "get": {
        "description": "Get referral information from each user you has referred.111",
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "description": "start time in unix timestamp",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "end time in unix timestamp",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the page you wish to query.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "the page size you wish to query, default = 25, 1000 at max.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/account/referral/rewardHistory": {
      "get": {
        "description": "Get referral information from each user you has referred.111",
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "description": "start time in unix timestamp",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "end time in unix timestamp",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the page you wish to query.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "the page size you wish to query, default = 25, 1000 at max.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/account/tokenConfig": {
      "get": {
        "description": "Get the token level configurations.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/account/symbolConfig": {
      "get": {
        "description": "Get the symbol level configurations.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SymbolConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/account/info": {
      "get": {
        "description": "Get the account information.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/spotMargin/leverage": {
      "post": {
        "description": "set leverage",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLeverage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/asset/token/history": {
      "get": {
        "description": "get token history",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "WITHDRAW/DEPOSIT/FIAT_WITHDRAW/FIAT_DEPOSIT/EARN/VAULT_WITHDRAW/VAULT_DEPOSIT/YIELD_TO_BALANCE/CREDIT/DISTRIBUTION/REFERRAL/SUB_ACCOUNT_TRANSFER/REBATE/LIQUIDATION/SPECIAL/STAKING/UNSTAKING/UNSTAKING_FEE/INTEREST/CONVERT/FUNDING_FEE/SPOT_TRADING/TRADING_FEE/REALIZED_PNL/RFQ/ COPY_FEE / COPY_PROFIT_SHARED / FEE_REBATE",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/start_filter"
          },
          {
            "$ref": "#/components/parameters/end_filter"
          },
          {
            "$ref": "#/components/parameters/page_filter"
          },
          {
            "$ref": "#/components/parameters/size_filter"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    },
    "/v3/futures/defaultMarginMode": {
      "get": {
        "description": "get account level default margin mode",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "description": "",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultMarginModeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ApiKeyAuth": [],
            "ApiSignAuth": [],
            "ApiTimestampAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      },
      "ApiSignAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-signature"
      },
      "ApiTimestampAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-timestamp"
      }
    },
    "schemas": {
      "CommonResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "true"
          },
          "timestamp": {
            "type": "integer",
            "description": "timestamp"
          }
        }
      },
      "SystemInfoResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "description": ""
                  },
                  "msg": {
                    "type": "string",
                    "description": ""
                  },
                  "estimated_end_time": {
                    "type": "integer",
                    "description": ""
                  }
                }
              }
            }
          }
        ]
      },
      "InstrumentsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "status": {
                          "type": "string",
                          "description": "TRADING, SUSPENDED, TESTING"
                        },
                        "baseAsset": {
                          "type": "string",
                          "description": ""
                        },
                        "baseAssetMultiplier": {
                          "type": "number",
                          "description": ""
                        },
                        "quoteAsset": {
                          "type": "string",
                          "description": ""
                        },
                        "quoteMin": {
                          "type": "number",
                          "description": ""
                        },
                        "quoteMax": {
                          "type": "number",
                          "description": ""
                        },
                        "quoteTick": {
                          "type": "number",
                          "description": ""
                        },
                        "baseMin": {
                          "type": "number",
                          "description": ""
                        },
                        "baseMax": {
                          "type": "number",
                          "description": ""
                        },
                        "baseTick": {
                          "type": "number",
                          "description": ""
                        },
                        "minNotional": {
                          "type": "number",
                          "description": ""
                        },
                        "bidCapRatio": {
                          "type": "number",
                          "description": ""
                        },
                        "bidFloorRatio": {
                          "type": "number",
                          "description": ""
                        },
                        "askCapRatio": {
                          "type": "number",
                          "description": ""
                        },
                        "askFloorRatio": {
                          "type": "number",
                          "description": ""
                        },
                        "fundingIntervalHours": {
                          "type": "number",
                          "description": ""
                        },
                        "fundingCap": {
                          "type": "number",
                          "description": ""
                        },
                        "fundingFloor": {
                          "type": "number",
                          "description": ""
                        },
                        "orderMode": {
                          "type": "string",
                          "description": "NORMAL, POST_ONLY, REDUCE_ONLY, CANCEL_ONLY"
                        },
                        "baseIMR": {
                          "type": "number",
                          "description": ""
                        },
                        "baseMMR": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "TokenResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": ""
                        },
                        "fullname": {
                          "type": "string",
                          "description": ""
                        },
                        "decimals": {
                          "type": "number",
                          "description": ""
                        },
                        "network": {
                          "type": "string",
                          "description": ""
                        },
                        "balanceToken": {
                          "type": "string",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "TokenNetworkResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": ""
                        },
                        "network": {
                          "type": "string",
                          "description": ""
                        },
                        "token": {
                          "type": "string",
                          "description": ""
                        },
                        "name": {
                          "type": "string",
                          "description": ""
                        },
                        "minimumWithdrawal": {
                          "type": "number",
                          "description": ""
                        },
                        "withdrawalFee": {
                          "type": "number",
                          "description": ""
                        },
                        "allowDeposit": {
                          "type": "number",
                          "description": ""
                        },
                        "allowWithdraw": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "TokenInfoResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": ""
                        },
                        "delisted": {
                          "type": "number",
                          "description": ""
                        },
                        "canCollateral": {
                          "type": "boolean",
                          "description": ""
                        },
                        "canShort": {
                          "type": "boolean",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "MarketTradesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "side": {
                          "type": "string",
                          "description": ""
                        },
                        "source": {
                          "type": "number",
                          "description": ""
                        },
                        "executedPrice": {
                          "type": "string",
                          "description": ""
                        },
                        "executedQuantity": {
                          "type": "string",
                          "description": ""
                        },
                        "executedTimestamp": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "MarketTradesHistoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "description": ""
                        },
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "side": {
                          "type": "string",
                          "description": ""
                        },
                        "executedPrice": {
                          "type": "string",
                          "description": ""
                        },
                        "executedQuantity": {
                          "type": "string",
                          "description": ""
                        },
                        "executedTimestamp": {
                          "type": "number",
                          "description": ""
                        },
                        "source": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "OrderbookResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "asks": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "price": {
                          "type": "string",
                          "description": ""
                        },
                        "quantity": {
                          "type": "string",
                          "description": ""
                        }
                      }
                    }
                  },
                  "bids": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "price": {
                          "type": "string",
                          "description": ""
                        },
                        "quantity": {
                          "type": "string",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "KlineResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "open": {
                          "type": "string",
                          "description": ""
                        },
                        "close": {
                          "type": "string",
                          "description": ""
                        },
                        "low": {
                          "type": "string",
                          "description": ""
                        },
                        "high": {
                          "type": "string",
                          "description": ""
                        },
                        "volume": {
                          "type": "string",
                          "description": ""
                        },
                        "amount": {
                          "type": "string",
                          "description": ""
                        },
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "type": {
                          "type": "string",
                          "description": ""
                        },
                        "startTimestamp": {
                          "type": "number",
                          "description": ""
                        },
                        "endTimestamp": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "KlineHistoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "open": {
                          "type": "string",
                          "description": ""
                        },
                        "close": {
                          "type": "string",
                          "description": ""
                        },
                        "high": {
                          "type": "string",
                          "description": ""
                        },
                        "low": {
                          "type": "string",
                          "description": ""
                        },
                        "volume": {
                          "type": "string",
                          "description": ""
                        },
                        "amount": {
                          "type": "string",
                          "description": ""
                        },
                        "type": {
                          "type": "string",
                          "description": ""
                        },
                        "startTimestamp": {
                          "type": "number",
                          "description": ""
                        },
                        "endTimestamp": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "FundingRateResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "estFundingRate": {
                          "type": "string",
                          "description": ""
                        },
                        "estFundingRateTimestamp": {
                          "type": "number",
                          "description": ""
                        },
                        "lastFundingRate": {
                          "type": "string",
                          "description": ""
                        },
                        "lastFundingRateTimestamp": {
                          "type": "number",
                          "description": ""
                        },
                        "nextFundingTime": {
                          "type": "number",
                          "description": ""
                        },
                        "lastFundingIntervalHours": {
                          "type": "number",
                          "description": ""
                        },
                        "estFundingIntervalHours": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "FundingRateHistoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "fundingRate": {
                          "type": "string",
                          "description": ""
                        },
                        "fundingRateTimestamp": {
                          "type": "number",
                          "description": ""
                        },
                        "nextFundingTime": {
                          "type": "number",
                          "description": ""
                        },
                        "markPrice": {
                          "type": "string",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "FuturesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": ""
                        },
                        "indexPrice": {
                          "type": "string",
                          "description": ""
                        },
                        "markPrice": {
                          "type": "string",
                          "description": ""
                        },
                        "estFundingRate": {
                          "type": "string",
                          "description": ""
                        },
                        "lastFundingRate": {
                          "type": "string",
                          "description": ""
                        },
                        "openInterest": {
                          "type": "string",
                          "description": ""
                        },
                        "24hOpen": {
                          "type": "string",
                          "description": ""
                        },
                        "24hClose": {
                          "type": "string",
                          "description": ""
                        },
                        "24hHigh": {
                          "type": "string",
                          "description": ""
                        },
                        "24hLow": {
                          "type": "string",
                          "description": ""
                        },
                        "24hVolume": {
                          "type": "string",
                          "description": ""
                        },
                        "24hAmount": {
                          "type": "string",
                          "description": ""
                        },
                        "nextFundingTime": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "InsuranceFundResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": ""
                        },
                        "balance": {
                          "type": "number",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "GetOrder": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "description": "Id of the order; Either orderId or clientOrderId is required. If both are passed, orderId will be used.",
            "example": "1954766344355779056"
          },
          "clientOrderId": {
            "type": "integer",
            "description": "Client order Id as assigned by the user; Either orderId or clientOrderId is required. If both are passed, orderId will be used.",
            "example": "1954766344355779056"
          },
          "withRealizedPnl": {
            "type": "boolean",
            "description": "Whether to return order’s realized pnl; Note that realized PnL is only calculated for Perpetual close orders.",
            "example": "false"
          }
        }
      },
      "GetOrderRowResponse": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "example": "PERP_BTC_USDT",
            "description": "Trading pair, e.g., BTC/USDT perpetual contract."
          },
          "status": {
            "type": "string",
            "example": "FILLED",
            "description": "Order status, e.g., FILLED indicates the order has been fully executed."
          },
          "side": {
            "type": "string",
            "example": "SELL",
            "description": "Trade direction, e.g., SELL means selling, BUY means buying."
          },
          "positionSide": {
            "type": "string",
            "example": "BOTH",
            "description": "Position direction, e.g., BOTH indicates a dual position mode."
          },
          "createdTime": {
            "type": "integer",
            "format": "int64",
            "example": 1578565539808,
            "description": "Order creation time in Unix timestamp (milliseconds)."
          },
          "orderId": {
            "type": "integer",
            "example": 13,
            "description": "Unique identifier for the order."
          },
          "orderTag": {
            "type": "string",
            "example": "default",
            "description": "Order tag, e.g., default."
          },
          "price": {
            "type": "string",
            "example": "123",
            "description": "Price of the limit order (price per unit of the asset)."
          },
          "type": {
            "type": "string",
            "example": "LIMIT",
            "description": "Order type, e.g., LIMIT represents a limit order."
          },
          "quantity": {
            "type": "string",
            "example": "0.1",
            "description": "Total quantity of the order, representing the number of assets."
          },
          "amount": {
            "type": "string",
            "nullable": true,
            "example": null,
            "description": "Total order amount, may be null."
          },
          "visible": {
            "type": "string",
            "example": "0.1",
            "description": "Visible quantity, representing the portion of the order shown to the market."
          },
          "executed": {
            "type": "string",
            "example": "0.1",
            "description": "Quantity that has been executed."
          },
          "totalFee": {
            "type": "string",
            "example": "0.00123",
            "description": "Total fee charged for the order, denominated in the fee asset."
          },
          "feeAsset": {
            "type": "string",
            "example": "USDT",
            "description": "Asset type used to pay fees."
          },
          "totalRebate": {
            "type": "number",
            "example": 0,
            "description": "Total rebate amount."
          },
          "rebateCurrency": {
            "type": "string",
            "example": "USDT",
            "description": "Asset type for the rebate."
          },
          "clientOrderId": {
            "type": "integer",
            "example": 0,
            "description": "Client-defined order ID."
          },
          "reduceOnly": {
            "type": "boolean",
            "example": false,
            "description": "Indicates whether the order is reduce-only."
          },
          "realizedPnl": {
            "type": "string",
            "example": "100",
            "description": "Realized profit and loss, e.g., 100 means a profit of 100 USDT."
          },
          "averageExecutedPrice": {
            "type": "string",
            "example": "123",
            "description": "Average price at which the order was executed."
          }
        }
      },
      "GetOrderResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/GetOrderRowResponse"
              }
            }
          }
        ]
      },
      "EditOrder": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "description": "Id of the order; Either orderId or clientOrderId is required. If both are passed, orderId will be used."
          },
          "clientOrderId": {
            "type": "integer",
            "description": "Client order Id as assigned by the user; Either orderId or clientOrderId is required. If both are passed, orderId will be used."
          },
          "price": {
            "type": "string",
            "description": "Only applicable to LIMIT/IOC/FOK/POST_ONLY orders;  MARKET/ASK/BID orders will ignore this field",
            "example": ""
          },
          "quantity": {
            "type": "string",
            "description": "Either quantity or amount is required;  If both are passed, the request will be rejected",
            "example": ""
          }
        }
      },
      "EditOrderResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": ""
                  }
                }
              }
            }
          }
        ]
      },
      "CreateOrder": {
        "required": [
          "symbol",
          "side",
          "type"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name",
            "example": "SPOT_BTC_USDT"
          },
          "clientOrderId": {
            "type": "integer",
            "description": "Valid input ranges from 0 to 9223372036854775807",
            "example": "1954766344355779056"
          },
          "orderTag": {
            "type": "string",
            "description": "Optional tag for this order, max string length: 64",
            "example": ""
          },
          "side": {
            "type": "string",
            "description": "BUY/SELL",
            "example": ""
          },
          "positionSide": {
            "type": "string",
            "description": "Position side; The default is BOTH in the one way mode;  Can only be LONG or SHORT in the hedge mode.  Only applicable to perpetual instruments.",
            "example": ""
          },
          "type": {
            "type": "string",
            "description": "LIMIT/MARKET/IOC/FOK/POST_ONLY/ASK/BID",
            "example": ""
          },
          "price": {
            "type": "string",
            "description": "Only applicable to LIMIT/IOC/FOK/POST_ONLY orders;  MARKET/ASK/BID orders will ignore this field",
            "example": ""
          },
          "quantity": {
            "type": "string",
            "description": "Either quantity or amount is required;  If both are passed, the request will be rejected",
            "example": ""
          },
          "amount": {
            "type": "string",
            "description": "Only applicable to MARKET/ASK/BID orders on spot instruments;  Either quantity or amount is required;  If both are passed, the request will be rejected",
            "example": ""
          },
          "reduceOnly": {
            "type": "boolean",
            "description": "Only applicable to perpetual instruments; Whether the order can only reduce in position size; valid options are true/false",
            "example": ""
          },
          "visibleQuantity": {
            "type": "string",
            "description": "The order quantity visible on orderbook",
            "example": ""
          }
        }
      },
      "CreateOrderResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "orderId": {
                    "type": "integer",
                    "description": ""
                  },
                  "type": {
                    "type": "string",
                    "description": ""
                  },
                  "price": {
                    "type": "string",
                    "description": ""
                  },
                  "quantity": {
                    "type": "string",
                    "description": ""
                  },
                  "amount": {
                    "type": "string",
                    "description": ""
                  },
                  "clientOrderId": {
                    "type": "integer",
                    "description": ""
                  }
                }
              }
            }
          }
        ]
      },
      "CancelOrder": {
        "required": [
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name1qq",
            "example": "SPOT_BTC_USDT"
          },
          "orderId": {
            "type": "integer",
            "description": "Id of the order; Either orderId or clientOrderId is required. If both are passed, orderId will be used.",
            "example": "1954766344355779056"
          },
          "clientOrderId": {
            "type": "integer",
            "description": "Client order Id as assigned by the user; Either orderId or clientOrderId is required. If both are passed, orderId will be used.",
            "example": "1954766344355779056"
          }
        }
      },
      "CancelOrderResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": ""
                  }
                }
              }
            }
          }
        ]
      },
      "GetOrders": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name"
          },
          "side": {
            "type": "string",
            "description": "BUY/SELL"
          },
          "positionSide": {
            "type": "string",
            "description": "BOTH for one way mode; LONG or SHORT for hedge mode;  Only applicable to perpetual instruments"
          },
          "type": {
            "type": "string",
            "description": "LIMIT/MARKET/IOC/FOK/POST_ONLY/LIQUIDATE"
          },
          "orderTag": {
            "type": "string",
            "description": "Order tag"
          },
          "withRealizedPnl": {
            "type": "boolean",
            "description": "Whether to return order’s realized pnl; Note that realized PnL is only calculated for Perpetual close orders."
          },
          "status": {
            "type": "string",
            "description": "NEW/CANCELLED/PARTIAL_FILLED/FILLED/REJECTED/INCOMPLETE/COMPLETED"
          },
          "startTime": {
            "type": "integer",
            "description": "Start timestamp in Unix timestamp format in milliseconds"
          },
          "endTime": {
            "type": "integer",
            "description": "End timestamp in Unix timestamp format in milliseconds"
          },
          "page": {
            "type": "integer",
            "description": "Page number"
          },
          "size": {
            "type": "integer",
            "description": "Data size per page, max 500"
          }
        }
      },
      "Meta": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of record"
          },
          "recordsPerPage": {
            "type": "integer",
            "description": "Number of records per page"
          },
          "currentPage": {
            "type": "integer",
            "description": "Current page number"
          }
        }
      },
      "GetOrdersResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GetOrderRowResponse"
                    },
                    "description": ""
                  },
                  "meta": {
                    "$ref": "#/components/schemas/Meta"
                  }
                }
              }
            }
          }
        ]
      },
      "CancelOrders": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name",
            "example": "SPOT_BTC_USDT"
          }
        }
      },
      "GetAlgoOrder": {
        "type": "object",
        "properties": {
          "algoOrderId": {
            "type": "integer",
            "description": "Id of the algoorder; Either algoOrderId or clientAlgoOrderId is required. If both are passed, algoOrderId will be used.",
            "example": "1954766344355779056"
          },
          "clientAlgoOrderId": {
            "type": "integer",
            "description": "Client order Id as assigned by the user; Either algoOrderId or clientAlgoOrderId is required. If both are passed, algoOrderId will be used.",
            "example": "1954766344355779056"
          }
        }
      },
      "GetAlgoOrderResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "algoOrderId": {
                    "type": "integer",
                    "description": "Unique identifier for the algorithmic order."
                  },
                  "clientAlgoOrderId": {
                    "type": "integer",
                    "description": "Client-generated algorithmic order ID."
                  },
                  "rootAlgoOrderId": {
                    "type": "integer",
                    "description": "Root algorithmic order ID."
                  },
                  "parentAlgoOrderId": {
                    "type": "integer",
                    "description": "Parent algorithmic order ID, 0 if none."
                  },
                  "symbol": {
                    "type": "string",
                    "description": "Trading pair identifier, e.g., SPOT_WOO_USDT."
                  },
                  "orderTag": {
                    "type": "string",
                    "description": "Tag associated with the order, e.g., 'default'."
                  },
                  "algoType": {
                    "type": "string",
                    "description": "Type of the algorithm, e.g., 'TRAILING_STOP'."
                  },
                  "side": {
                    "type": "string",
                    "description": "Order direction, e.g., 'BUY' or 'SELL'."
                  },
                  "positionSide": {
                    "type": "string",
                    "description": "Position direction, e.g., 'BOTH'."
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "The quantity for the order."
                  },
                  "isTriggered": {
                    "type": "boolean",
                    "description": "Indicates if the order has been triggered."
                  },
                  "triggerStatus": {
                    "type": "string",
                    "description": "The trigger status of the order, e.g., 'USELESS'."
                  },
                  "type": {
                    "type": "string",
                    "description": "Order type, e.g., 'MARKET'."
                  },
                  "rootAlgoStatus": {
                    "type": "string",
                    "description": "Status of the root algorithmic order, e.g., 'NEW'."
                  },
                  "algoStatus": {
                    "type": "string",
                    "description": "Status of the algorithmic order, e.g., 'NEW'."
                  },
                  "triggerPriceType": {
                    "type": "string",
                    "description": "The type of price used for triggering, e.g., 'MARKET_PRICE'."
                  },
                  "triggerTime": {
                    "type": "string",
                    "description": "Timestamp for when the order is triggered, '0' if not triggered."
                  },
                  "totalExecutedQuantity": {
                    "type": "string",
                    "description": "Total quantity executed."
                  },
                  "averageExecutedPrice": {
                    "type": "string",
                    "description": "Average price of executed quantity."
                  },
                  "totalFee": {
                    "type": "string",
                    "description": "Total fee charged for the order."
                  },
                  "feeAsset": {
                    "type": "string",
                    "description": "Asset used for paying the fees."
                  },
                  "totalRebate": {
                    "type": "string",
                    "description": "Total rebate received for the order."
                  },
                  "rebateCurrency": {
                    "type": "string",
                    "description": "Currency in which rebate is paid, e.g., 'USDT'."
                  },
                  "reduceOnly": {
                    "type": "boolean",
                    "description": "Indicates if the order is reduce-only."
                  },
                  "createdTime": {
                    "type": "integer",
                    "description": "Timestamp of when the order was created."
                  },
                  "updatedTime": {
                    "type": "integer",
                    "description": "Timestamp of when the order was last updated."
                  },
                  "isActivated": {
                    "type": "boolean",
                    "description": "Indicates if the order is activated."
                  },
                  "callbackRate": {
                    "type": "string",
                    "description": "Callback rate for the algorithm, e.g., '0.03'."
                  },
                  "activatedPrice": {
                    "type": "string",
                    "description": "Activated price for the algorithm, e.g., '0.21'."
                  }
                }
              }
            }
          }
        ]
      },
      "common_algo": {
        "type": "object",
        "properties": {
          "algoOrderId": {
            "type": "integer",
            "description": "Algo order Id; Either algoOrderId or clientOrderId is required. If both are passed, algoOrderId will be used."
          },
          "clientAlgoOrderId": {
            "type": "integer",
            "description": "Algo order client order Id; Either algoOrderId or clientAlgoOrderId is required. If both are passed, algoOrderId will be used."
          },
          "quantity": {
            "type": "string",
            "description": "Order quantity, not required for POSITIONAL_TP_SL order"
          },
          "visibleQuantity": {
            "type": "integer",
            "description": "The order quantity shown on orderbook;  for POSITIONAL_TP_SL order, visibleQuantity applies directly to the child orders"
          }
        }
      },
      "stop_order": {
        "description": "Stop order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "properties": {
              "triggerPrice": {
                "type": "string",
                "description": "New trigger price"
              },
              "triggerPriceType": {
                "type": "string",
                "description": "New trigger price type, currently only support MARKET_PRICE (i.e. last price) "
              },
              "price": {
                "type": "string",
                "description": "New order price, only applicable if type is LIMIT"
              }
            }
          }
        ]
      },
      "oco_order": {
        "description": "OCO order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "properties": {
              "price": {
                "type": "string",
                "description": "New order price of the LIMIT order"
              },
              "childOrders": {
                "type": "array",
                "description": "Details of the trigger order",
                "items": {
                  "type": "object",
                  "properties": {
                    "triggerPrice": {
                      "type": "string",
                      "description": "New trigger price"
                    },
                    "triggerPriceType": {
                      "type": "string",
                      "description": "New trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                    },
                    "price": {
                      "type": "string",
                      "description": "New order price, only applicable if trigger order type is LIMIT"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "trailing_stop": {
        "description": "TRAILING STOP order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "properties": {
              "activatedPrice": {
                "type": "string",
                "description": "New activated price for TRAILING_STOP order"
              },
              "triggerPriceType": {
                "type": "boolean",
                "description": "New trigger price type, currently only support MARKET_PRICE (i.e. last price);  Effective on activatedPrice "
              },
              "callbackRate": {
                "type": "string",
                "description": "New trailing rate for TRAILING_STOP order;  Editing from using callbackRate to using callbackValue or vice versa is not allowed"
              },
              "callbackValue": {
                "type": "string",
                "description": "New trailing value for TRAILING_STOP order;  Editing from using callbackRate to using callbackValue or vice versa is not allowed"
              }
            }
          }
        ]
      },
      "positional_tp_sl": {
        "description": "POSITIONAL TP/SL order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "properties": {
              "childOrders": {
                "type": "array",
                "description": "Details of the TAKE_PROFIT and the STOP_LOSS order",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoOrderId": {
                      "type": "string",
                      "description": "Algo order Id of the TAKE_PROFIT or the STOP_LOSS order"
                    },
                    "triggerPrice": {
                      "type": "string",
                      "description": "New trigger price"
                    },
                    "triggerPriceType": {
                      "type": "string",
                      "description": "New trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "tp_sl": {
        "description": "TP/SL order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "properties": {
              "childOrders": {
                "type": "array",
                "description": "Details of the TAKE_PROFIT and the STOP_LOSS order",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoOrderId": {
                      "type": "string",
                      "description": "Algo order Id of the TAKE_PROFIT or the STOP_LOSS order"
                    },
                    "triggerPrice": {
                      "type": "string",
                      "description": "New trigger price"
                    },
                    "triggerPriceType": {
                      "type": "string",
                      "description": "New trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "bracket": {
        "description": "Bracket order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "properties": {
              "price": {
                "type": "string",
                "description": "Order price of the initial order, only applicable if the initial order type is LIMIT"
              },
              "childOrders": {
                "type": "array",
                "description": "Details of the Positional_TP_SL or the TP_SL order",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoOrderId": {
                      "type": "string",
                      "description": "Algo order Id of the Positional_TP_SL or the TP_SL order"
                    },
                    "triggerPrice": {
                      "type": "string",
                      "description": "New trigger price"
                    },
                    "triggerPriceType": {
                      "type": "string",
                      "description": "New trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "stop_bracket": {
        "description": "Stop bracket order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo"
          },
          {
            "type": "object",
            "properties": {
              "price": {
                "type": "string",
                "description": "Order price of the initial order, only applicable if the initial order type is LIMIT"
              },
              "triggerPrice": {
                "type": "string",
                "description": "Trigger price of the initial stop order"
              },
              "triggerPriceType": {
                "type": "string",
                "description": "Trigger price type of the initial stop order, currently only support MARKET_PRICE (i.e. last price)"
              },
              "childOrders": {
                "type": "array",
                "description": "Attached TP/SL orders, only support 1 set of POSITIONAL_TP_SL or TP_SL",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoOrderId": {
                      "type": "string",
                      "description": "Algo order Id of the Positional_TP_SL or the TP_SL order"
                    },
                    "childOrders": {
                      "type": "array",
                      "description": "Details of the TP/SL information, can contain at most 1 TAKE_PROFIT and 1 STOP_LOSS",
                      "items": {
                        "type": "object",
                        "properties": {
                          "algoOrderId": {
                            "type": "string",
                            "description": "Algo order Id of the TAKE_PROFIT or the STOP_LOSS order"
                          },
                          "triggerPrice": {
                            "type": "string",
                            "description": "New trigger price"
                          },
                          "triggerPriceType": {
                            "type": "string",
                            "description": "New trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "common_algo_common_algo": {
        "type": "object",
        "required": [
          "symbol",
          "algoType"
        ],
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name"
          },
          "algoType": {
            "type": "string",
            "description": "STOP: stop market / stop limit order\nOCO: one-cancels-the-other order\nTRAILING_STOP: trailing stop order \nPOSITIONAL_TP_SL: TP/SL that closes the full position\nTP_SL: TP/SL that closes a specified quantity\nBRACKET: bracket order with limit or market order as the initial order and an attached POSITIONAL_TP_SL or TP_SL order\nSTOP_BRACKET: bracket order with stop market or stop limit order as the initial order and an attached POSITIONAL_TP_SL or TP_SL order"
          },
          "clientAlgoOrderId": {
            "type": "integer",
            "description": "Client algo order Id as assigned by the user"
          },
          "algoOrderTag": {
            "type": "string",
            "description": "An optional tag for this order, max string length: 64"
          },
          "side": {
            "type": "string",
            "description": "BUY/SELL, not required for POSITIONAL_TP_SL or TP_SL order"
          },
          "positionSide": {
            "type": "string",
            "description": "BOTH for one way mode; LONG or SHORT for hedge mode;  Only applicable to perpetual instruments"
          },
          "quantity": {
            "type": "string",
            "description": "Order quantity, not required for POSITIONAL_TP_SL order"
          },
          "visibleQuantity": {
            "type": "string",
            "description": "The order quantity shown on orderbook;  for POSITIONAL_TP_SL order, visibleQuantity applies directly to the child orders"
          }
        }
      },
      "stop_order_stop_order": {
        "description": "Stop order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo_common_algo"
          },
          {
            "type": "object",
            "properties": {
              "triggerPrice": {
                "type": "string",
                "description": "Only support LIMIT"
              },
              "triggerPriceType": {
                "type": "string",
                "description": "Trigger price type, currently only support MARKET_PRICE (i.e. last price)"
              },
              "type": {
                "type": "string",
                "description": "Trigger price, only support LIMIT"
              },
              "price": {
                "type": "string",
                "description": "Order price, only applicable to LIMIT type"
              },
              "reduceOnly": {
                "type": "boolean",
                "description": "Only applicable to perpetual instruments; whether the order can only reduce in position size; valid options are true/false"
              }
            }
          }
        ]
      },
      "oco_order_oco_order": {
        "description": "OCO order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo_common_algo"
          },
          {
            "type": "object",
            "required": [
              "type",
              "price",
              "childOrders"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "Trigger price, only support LIMIT"
              },
              "price": {
                "type": "string",
                "description": "Order price, only applicable to LIMIT type"
              },
              "reduceOnly": {
                "type": "boolean",
                "description": "Only applicable to perpetual instruments; whether the order can only reduce in position size; valid options are true/false"
              },
              "childOrders": {
                "type": "array",
                "description": "Details of the other order (i.e. the trigger order)",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoType": {
                      "type": "string",
                      "description": "Only support STOP"
                    },
                    "side": {
                      "type": "string",
                      "description": "BUY/SELL; required to be the same as the side of the LIMIT order"
                    },
                    "triggerPrice": {
                      "type": "string",
                      "description": "Trigger price"
                    },
                    "triggerPriceType": {
                      "type": "string",
                      "description": "Trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                    },
                    "type": {
                      "type": "string",
                      "description": "Order type of the trigger order, LIMIT/MARKET"
                    },
                    "price": {
                      "type": "string",
                      "description": "Order price of the trigger order, only applicable if it's a LIMIT order"
                    }
                  },
                  "required": [
                    "algoType",
                    "side",
                    "triggerPrice",
                    "type"
                  ]
                }
              }
            }
          }
        ]
      },
      "trailing_stop_trailing_stop": {
        "description": "TRAILING STOP order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo_common_algo"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Trigger price, only support LIMIT"
              },
              "activatedPrice": {
                "type": "string",
                "description": "Activated price"
              },
              "callbackRate": {
                "type": "string",
                "description": "Either callbackValue or callbackRate is required;  If both are passed, the request will be rejected"
              },
              "callbackValue": {
                "type": "string",
                "description": "Either callbackValue or callbackRate is required;  If both are passed, the request will be rejected"
              },
              "reduceOnly": {
                "type": "boolean",
                "description": "Only applicable to perpetual instruments; whether the order can only reduce in position size; valid options are true/false"
              }
            }
          }
        ]
      },
      "positional_tp_sl_positional_tp_sl": {
        "description": "POSITIONAL TP/SL order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo_common_algo"
          },
          {
            "type": "object",
            "required": [
              "childOrders"
            ],
            "properties": {
              "childOrders": {
                "type": "array",
                "description": "Details of the positional TP/SL information, can contain at most 1 TAKE_PROFIT and 1 STOP_LOSS",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoType": {
                      "type": "string",
                      "description": "TAKE_PROFIT/STOP_LOSS"
                    },
                    "side": {
                      "type": "string",
                      "description": "BUY/SELL"
                    },
                    "triggerPrice": {
                      "type": "string",
                      "description": "Trigger price"
                    },
                    "triggerPriceType": {
                      "type": "string",
                      "description": "Trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                    },
                    "type": {
                      "type": "string",
                      "description": "Only support CLOSE_POSITION"
                    }
                  },
                  "required": [
                    "algoType",
                    "side",
                    "triggerPrice",
                    "type"
                  ]
                }
              }
            }
          }
        ]
      },
      "tp_sl_tp_sl": {
        "description": "TP/SL order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo_common_algo"
          },
          {
            "type": "object",
            "required": [
              "childOrders"
            ],
            "properties": {
              "childOrders": {
                "type": "array",
                "description": "Details of the TP/SL information, can contain at most 1 TAKE_PROFIT and 1 STOP_LOSS",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoType": {
                      "type": "string",
                      "description": "TAKE_PROFIT/STOP_LOSS"
                    },
                    "side": {
                      "type": "string",
                      "description": "BUY/SELL"
                    },
                    "triggerPrice": {
                      "type": "string",
                      "description": "Trigger price"
                    },
                    "triggerPriceType": {
                      "type": "string",
                      "description": "Trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                    },
                    "type": {
                      "type": "string",
                      "description": "Only support MARKET"
                    }
                  },
                  "required": [
                    "algoType",
                    "side",
                    "triggerPrice",
                    "type"
                  ]
                }
              }
            }
          }
        ]
      },
      "bracket_bracket": {
        "description": "Bracket order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo_common_algo"
          },
          {
            "type": "object",
            "required": [
              "type",
              "price",
              "childOrders"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "LIMIT/MARKET"
              },
              "price": {
                "type": "string",
                "description": "Order price, only applicable if LIMIT order"
              },
              "reduceOnly": {
                "type": "boolean",
                "description": "Only applicable to perpetual instruments; whether the LIMIT/MARKET order can only reduce in position size; only support false for BRACKET orders"
              },
              "childOrders": {
                "type": "array",
                "description": "Attached TP/SL orders, only support 1 set of POSITIONAL_TP_SL or TP_SL",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoType": {
                      "type": "string",
                      "description": "TAKE_PROFIT/STOP_LOSS"
                    },
                    "side": {
                      "type": "string",
                      "description": "Required to be SELL if side of the initial order is BUY;  Required to be BUY if side of the initial order is SELL"
                    },
                    "triggerPrice": {
                      "type": "string",
                      "description": "Trigger price of the TP/SL"
                    },
                    "triggerPriceType": {
                      "type": "string",
                      "description": "Trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                    },
                    "type": {
                      "type": "string",
                      "description": "CLOSE_POSITION for POSITIONAL_TP_SL; MARKET for TP_SL"
                    }
                  },
                  "required": [
                    "algoType",
                    "side",
                    "triggerPrice",
                    "type"
                  ]
                }
              }
            }
          }
        ]
      },
      "stop_bracket_stop_bracket": {
        "description": "Stop bracket order",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_algo_common_algo"
          },
          {
            "type": "object",
            "required": [
              "type",
              "price",
              "childOrders"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "LIMIT/MARKET"
              },
              "price": {
                "type": "string",
                "description": "Order price, only applicable if LIMIT order"
              },
              "reduceOnly": {
                "type": "boolean",
                "description": "Only applicable to perpetual instruments; whether the LIMIT/MARKET order can only reduce in position size; only support false for STOP_BRACKET orders"
              },
              "triggerPrice": {
                "type": "string",
                "description": "Trigger price of the initial stop order"
              },
              "triggerPriceType": {
                "type": "string",
                "description": "Trigger price type of the initial stop order, currently only support MARKET_PRICE (i.e. last price)"
              },
              "childOrders": {
                "type": "array",
                "description": "Attached TP/SL orders, only support 1 set of POSITIONAL_TP_SL or TP_SL",
                "items": {
                  "type": "object",
                  "properties": {
                    "algoType": {
                      "type": "string",
                      "description": "POSITIONAL_TP_SL/TP_SL"
                    },
                    "childOrders": {
                      "type": "array",
                      "description": "Details of the TP/SL information, can contain at most 1 TAKE_PROFIT and 1 STOP_LOSS",
                      "items": {
                        "type": "object",
                        "properties": {
                          "algoType": {
                            "type": "string",
                            "description": "TAKE_PROFIT/STOP_LOSS"
                          },
                          "side": {
                            "type": "string",
                            "description": "Required to be SELL if side of the initial order is BUY;  Required to be BUY if side of the initial order is SELL"
                          },
                          "triggerPrice": {
                            "type": "string",
                            "description": "Trigger price of the TP/SL"
                          },
                          "triggerPriceType": {
                            "type": "string",
                            "description": "Trigger price type, currently only support MARKET_PRICE (i.e. last price)"
                          },
                          "type": {
                            "type": "string",
                            "description": "CLOSE_POSITION for POSITIONAL_TP_SL; MARKET for TP_SL"
                          }
                        },
                        "required": [
                          "algoType",
                          "side",
                          "triggerPrice",
                          "type"
                        ]
                      }
                    }
                  },
                  "required": [
                    "algoType",
                    "childOrders"
                  ]
                }
              }
            }
          }
        ]
      },
      "AlgoBaseResponse": {
        "type": "object",
        "properties": {
          "algoOrderId": {
            "type": "integer",
            "description": "algoOrderId"
          },
          "clientAlgoOrderId": {
            "type": "integer",
            "description": "clientAlgoOrderId"
          },
          "algoType": {
            "type": "string",
            "description": "ALGO_TYPE"
          },
          "quantity": {
            "type": "string",
            "description": "quantity"
          }
        }
      },
      "StopResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AlgoBaseResponse"
                    },
                    "description": ""
                  }
                }
              }
            }
          }
        ]
      },
      "CancelAlgoOrder": {
        "type": "object",
        "properties": {
          "algoOrderId": {
            "type": "integer",
            "description": "Id of the algoorder; Either algoOrderId or clientAlgoOrderId is required. If both are passed, algoOrderId will be used.",
            "example": "1954766344355779056"
          },
          "clientAlgoOrderId": {
            "type": "integer",
            "description": "Client order Id as assigned by the user; Either algoOrderId or clientAlgoOrderId is required. If both are passed, algoOrderId will be used.",
            "example": "1954766344355779056"
          }
        }
      },
      "GetAlgoOrders": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name"
          },
          "side": {
            "type": "string",
            "description": "BUY/SELL"
          },
          "positionSide": {
            "type": "string",
            "description": "BOTH for one way mode; LONG or SHORT for hedge mode;  Only applicable to perpetual instruments"
          },
          "algoType": {
            "type": "string",
            "description": "STOP/OCO/TRAILING_STOP/POSITIONAL_TP_SL/TP_SL/BRACKET/STOP_BRACKET"
          },
          "orderType": {
            "type": "string",
            "description": "LIMIT/MARKET"
          },
          "isTriggered": {
            "type": "string",
            "description": "true/false"
          },
          "algoOrderTag": {
            "type": "string",
            "description": "Order tag"
          },
          "realizedPnl": {
            "type": "boolean",
            "description": "Whether to return order’s realized pnl"
          },
          "status": {
            "type": "string",
            "description": "NEW/CANCELLED/PARTIAL_FILLED/FILLED/REJECTED/INCOMPLETE/COMPLETED"
          },
          "startTime": {
            "type": "integer",
            "description": "Start timestamp in Unix timestamp format in milliseconds"
          },
          "endTime": {
            "type": "integer",
            "description": "End timestamp in Unix timestamp format in milliseconds"
          },
          "page": {
            "type": "integer",
            "description": "Page number"
          },
          "size": {
            "type": "integer",
            "description": "Data size per page, max 500"
          }
        }
      },
      "GetAlgoOrderRowResponse": {
        "type": "object",
        "properties": {
          "algoOrderId": {
            "type": "integer",
            "description": "Unique identifier for the algorithmic order."
          },
          "clientAlgoOrderId": {
            "type": "integer",
            "description": "Client-generated unique identifier for the algorithmic order."
          },
          "rootAlgoOrderId": {
            "type": "integer",
            "description": "Root algorithmic order ID, linking to the original order."
          },
          "parentAlgoOrderId": {
            "type": "integer",
            "description": "Parent algorithmic order ID, 0 if there is no parent order."
          },
          "symbol": {
            "type": "string",
            "description": "Trading pair symbol, e.g., SPOT_WOO_USDT."
          },
          "algoOrderTag": {
            "type": "string",
            "description": "Tag associated with the algorithmic order, e.g., 'default'."
          },
          "algoType": {
            "type": "string",
            "description": "Type of algorithmic order, e.g., TRAILING_STOP."
          },
          "side": {
            "type": "string",
            "description": "Trade direction, e.g., SELL indicates selling."
          },
          "positionSide": {
            "type": "string",
            "description": "Position side, e.g., BOTH indicates a dual position mode."
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity for the algorithmic order."
          },
          "isTriggered": {
            "type": "boolean",
            "description": "Indicates whether the order has been triggered."
          },
          "triggerStatus": {
            "type": "string",
            "description": "Trigger status of the order, e.g., USELESS."
          },
          "type": {
            "type": "string",
            "description": "Order type, e.g., MARKET."
          },
          "rootAlgoStatus": {
            "type": "string",
            "description": "Status of the root algorithmic order, e.g., NEW."
          },
          "algoStatus": {
            "type": "string",
            "description": "Status of the algorithmic order, e.g., NEW."
          },
          "triggerPriceType": {
            "type": "string",
            "description": "Price type used for triggering, e.g., MARKET_PRICE."
          },
          "triggerTime": {
            "type": "string",
            "description": "Timestamp when the order was triggered, '0' if not triggered."
          },
          "totalExecutedQuantity": {
            "type": "string",
            "description": "Total executed quantity for the order."
          },
          "averageExecutedPrice": {
            "type": "string",
            "description": "Average price of the executed quantity."
          },
          "totalFee": {
            "type": "string",
            "description": "Total fee charged for the algorithmic order."
          },
          "feeAsset": {
            "type": "string",
            "description": "Asset type used for paying fees, e.g., USDT."
          },
          "totalRebate": {
            "type": "number",
            "description": "Total rebate received for the order."
          },
          "rebateCurrency": {
            "type": "string",
            "description": "Currency in which the rebate is paid, e.g., USDT."
          },
          "reduceOnly": {
            "type": "boolean",
            "description": "Indicates whether the order is reduce-only."
          },
          "createdTime": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp when the order was created (in milliseconds)."
          },
          "updatedTime": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp when the order was last updated (in milliseconds)."
          },
          "isActivated": {
            "type": "boolean",
            "description": "Indicates whether the algorithmic order is activated."
          },
          "callbackRate": {
            "type": "string",
            "description": "Callback rate for the algorithmic order."
          },
          "activatedPrice": {
            "type": "string",
            "description": "Activated price for the algorithmic order."
          }
        }
      },
      "GetAlgoOrdersResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GetAlgoOrderRowResponse"
                    },
                    "description": ""
                  },
                  "meta": {
                    "$ref": "#/components/schemas/Meta"
                  }
                }
              }
            }
          }
        ]
      },
      "CancelAlgoOrders": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name"
          }
        }
      },
      "CancelOrdersBySymbol": {
        "required": [
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name"
          },
          "side": {
            "type": "string",
            "description": "BUY/SELL"
          },
          "positionSide": {
            "type": "string",
            "description": "BOTH for one way mode; LONG or SHORT for hedge mode;  Cancel both sides if not passed. Only applicable to perpetual instruments"
          }
        }
      },
      "GetTransaction": {
        "required": [
          "tradeId"
        ],
        "type": "object",
        "properties": {
          "tradeId": {
            "type": "integer",
            "description": "Trade Id",
            "example": "1954766344355779056"
          }
        }
      },
      "GetTransactions": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name"
          },
          "startTime": {
            "type": "integer",
            "description": "Start timestamp in Unix timestamp format in milliseconds"
          },
          "endTime": {
            "type": "integer",
            "description": "End timestamp in Unix timestamp format in milliseconds"
          },
          "fromId": {
            "type": "integer",
            "description": "Trade Id to search from"
          },
          "limit": {
            "type": "integer",
            "description": "Number of results per request"
          }
        }
      },
      "GetTransactionsRowResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the execution detail."
          },
          "symbol": {
            "type": "string",
            "description": "Trading pair symbol, e.g., SPOT_BTC_USDT."
          },
          "orderId": {
            "type": "integer",
            "description": "Identifier for the order to which this execution belongs."
          },
          "orderTag": {
            "type": "string",
            "description": "Tag associated with the order, e.g., 'default'."
          },
          "executedPrice": {
            "type": "string",
            "description": "Price at which the execution occurred."
          },
          "executedQuantity": {
            "type": "string",
            "description": "Quantity of the asset that was executed."
          },
          "isMaker": {
            "type": "integer",
            "description": "Indicates if the order was a maker order (1) or a taker order (0)."
          },
          "side": {
            "type": "string",
            "description": "Trade direction, e.g., SELL or BUY."
          },
          "fee": {
            "type": "number",
            "description": "Trading fee incurred during the execution."
          },
          "feeAsset": {
            "type": "string",
            "description": "Asset type used to pay the trading fee."
          },
          "realizedPnl": {
            "type": "string",
            "nullable": true,
            "description": "Realized profit and loss. Can be null if not applicable."
          },
          "executedTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of the execution in Unix milliseconds."
          }
        }
      },
      "GetTransactionsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GetTransactionsRowResponse"
                    },
                    "description": ""
                  },
                  "meta": {
                    "$ref": "#/components/schemas/Meta"
                  }
                }
              }
            }
          }
        ]
      },
      "GetTradingFee": {
        "required": [
          "symbol"
        ],
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol name",
            "example": "SPOT_BTC_USDT"
          }
        }
      },
      "GetTradingFeeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "symbol": {
                    "type": "string",
                    "description": "Trading pair symbol, e.g., SPOT_ETH_USDT."
                  },
                  "takerFee": {
                    "type": "string",
                    "description": "Fee rate for taker orders, represented as a string."
                  },
                  "makerFee": {
                    "type": "string",
                    "description": "Fee rate for maker orders, represented as a string."
                  }
                }
              }
            }
          }
        ]
      },
      "ReferralResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "referralId": {
                          "type": "integer",
                          "description": "Referral ID"
                        },
                        "registerTime": {
                          "type": "string",
                          "description": "Time the referral was registered"
                        },
                        "referralCode": {
                          "type": "string",
                          "description": "Referral code"
                        },
                        "tradeStatus": {
                          "type": "string",
                          "description": "Status of the trade"
                        },
                        "earned": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "token": {
                                "type": "string",
                                "description": "Token type"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Amount earned"
                              }
                            }
                          }
                        },
                        "extraBonus": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "token": {
                                "type": "string",
                                "description": "Token type"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Amount earned"
                              }
                            }
                          }
                        },
                        "previousCommission": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "token": {
                                "type": "string",
                                "description": "Token type"
                              },
                              "totalAmount": {
                                "type": "string",
                                "description": "Amount earned"
                              }
                            }
                          }
                        },
                        "email": {
                          "type": "string",
                          "description": "Email address"
                        }
                      }
                    }
                  },
                  "meta": {
                    "$ref": "#/components/schemas/Meta"
                  }
                }
              }
            }
          }
        ]
      },
      "TokenConfigResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": "Token symbol, e.g., BTC."
                        },
                        "collateralRatio": {
                          "type": "string",
                          "description": "The collateral ratio of the token, represented as a string."
                        },
                        "marginFactor": {
                          "type": "string",
                          "description": "The margin factor of the token, represented as a string for precision."
                        },
                        "collateral": {
                          "type": "boolean",
                          "description": "Indicates if the token is currently being used as collateral."
                        },
                        "canCollateral": {
                          "type": "boolean",
                          "description": "Indicates if the token can be used as collateral."
                        },
                        "canShort": {
                          "type": "boolean",
                          "description": "Indicates if short selling is supported for the token."
                        },
                        "marginMaxLeverage": {
                          "type": "integer",
                          "description": "Maximum leverage allowed for margin trading."
                        },
                        "marginMaxPosition": {
                          "type": "integer",
                          "description": "Maximum allowed position size for the token in margin trading."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "SymbolConfigResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "string",
                          "description": "Trading pair symbol, e.g., PERP_BTC_USDT."
                        },
                        "margin_factor": {
                          "type": "string",
                          "description": "Margin factor for the trading pair, represented as a string for precision."
                        },
                        "maxLeverage": {
                          "type": "integer",
                          "description": "Maximum leverage allowed for this trading pair."
                        },
                        "maxPosition": {
                          "type": "integer",
                          "description": "Maximum position size allowed for this trading pair."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "AccountInfoResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "applicationId": {
                    "type": "string",
                    "description": "The ID of the application associated with the account."
                  },
                  "account": {
                    "type": "string",
                    "description": "The account identifier."
                  },
                  "alias": {
                    "type": "string",
                    "description": "Alias name for the account."
                  },
                  "otpauth": {
                    "type": "boolean",
                    "description": "Indicates whether OTP authentication is enabled for the account."
                  },
                  "accountMode": {
                    "type": "string",
                    "description": "The account mode, e.g., 'MARGIN'."
                  },
                  "positionMode": {
                    "type": "string",
                    "description": "Position mode of the account, e.g., 'ONE_WAY'."
                  },
                  "leverage": {
                    "type": "integer",
                    "description": "The leverage level set for the account."
                  },
                  "marginRatio": {
                    "type": "string",
                    "description": "The margin ratio of the account."
                  },
                  "openMarginRatio": {
                    "type": "string",
                    "description": "The open margin ratio of the account."
                  },
                  "initialMarginRatio": {
                    "type": "string",
                    "description": "The initial margin ratio of the account."
                  },
                  "maintenanceMarginRatio": {
                    "type": "string",
                    "description": "The maintenance margin ratio of the account."
                  },
                  "totalCollateral": {
                    "type": "string",
                    "description": "The total collateral value of the account."
                  },
                  "freeCollateral": {
                    "type": "string",
                    "description": "The free collateral value of the account."
                  },
                  "totalAccountValue": {
                    "type": "string",
                    "description": "The total account value."
                  },
                  "totalTradingValue": {
                    "type": "string",
                    "description": "The total trading value of the account."
                  },
                  "totalVaultValue": {
                    "type": "string",
                    "description": "The total vault value of the account."
                  },
                  "totalStakingValue": {
                    "type": "string",
                    "description": "The total staking value of the account."
                  },
                  "totalEarnValue": {
                    "type": "string",
                    "description": "The total value earned by the account."
                  },
                  "totalLaunchpadValue": {
                    "type": "string",
                    "description": "The total launchpad value of the account."
                  },
                  "referrerID": {
                    "type": "string",
                    "description": "The ID of the referrer associated with the account."
                  },
                  "accountType": {
                    "type": "string",
                    "description": "The type of the account, e.g., 'Main'."
                  }
                }
              }
            }
          }
        ]
      },
      "SetLeverage": {
        "required": [
          "leverage"
        ],
        "type": "object",
        "properties": {
          "leverage": {
            "type": "integer",
            "description": "For margin mode: 3, 4, 5, 10; for futures mode: 1, 2, 3, 4, 5, 10, 15, 20, 30, 40, 50",
            "example": "5"
          }
        }
      },
      "TokenHistoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": ""
                        },
                        "type": {
                          "type": "string",
                          "description": "type"
                        },
                        "token": {
                          "type": "string",
                          "description": "token"
                        },
                        "amount": {
                          "type": "string",
                          "description": "amount"
                        },
                        "timestamp": {
                          "type": "integer",
                          "description": "timestamp"
                        }
                      }
                    }
                  },
                  "meta": {
                    "$ref": "#/components/schemas/Meta"
                  }
                }
              }
            }
          }
        ]
      },
      "DefaultMarginModeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "symbol": {
                          "type": "integer",
                          "description": ""
                        },
                        "defaultMarginMode": {
                          "type": "string",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "parameters": {
      "start_filter": {
        "name": "startTime",
        "in": "query",
        "description": "start www time in unix timestamp",
        "required": false,
        "explode": true,
        "schema": {
          "type": "integer"
        }
      },
      "end_filter": {
        "name": "endTime",
        "in": "query",
        "description": "end time in unix timestamp",
        "required": false,
        "explode": true,
        "schema": {
          "type": "integer"
        }
      },
      "page_filter": {
        "name": "page",
        "in": "query",
        "description": "the page you wish to query.",
        "required": false,
        "explode": true,
        "schema": {
          "type": "integer",
          "default": 1
        }
      },
      "size_filter": {
        "name": "size",
        "in": "query",
        "description": "the page size you wish to query, default = 25, 1000 at max.",
        "required": false,
        "explode": true,
        "schema": {
          "type": "integer",
          "default": 25
        }
      }
    }
  }
}